///////////////////////////////////////////////////////////
//  RedefinableElement.cs
//  Implementation of the Class RedefinableElement
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:12
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.CommonStructure;

namespace UML.Classification
{
    /// <summary>
    ///     A RedefinableElement is an element that, when defined in the context of a
    ///     Classifier, can be redefined more specifically or differently in the context of
    ///     another Classifier that specializes (directly or indirectly) the context
    ///     Classifier.
    /// </summary>
    public interface RedefinableElement : NamedElement
    {
        /// <summary>
        ///     Indicates whether it is possible to further redefine a RedefinableElement. If
        ///     the value is true, then it is not possible to further redefine the
        ///     RedefinableElement.
        /// </summary>
        bool isLeaf { get; set; }

        /// <summary>
        ///     The RedefinableElement that is being redefined by this element.
        /// </summary>
        IEnumerable<RedefinableElement> redefinedElement { get; set; }

        /// <summary>
        ///     The contexts that this element may be redefined from.
        /// </summary>
        IEnumerable<Classifier> redefinitionContext { get; set; }

        /// <summary>
        ///     The query isConsistentWith() specifies, for any two RedefinableElements in a
        ///     context in which redefinition is possible, whether redefinition would be
        ///     logically consistent. By default, this is false; this operation must be
        ///     overridden for subclasses of RedefinableElement to define the consistency
        ///     conditions.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="redefiningElement"></param>
        bool isConsistentWith(RedefinableElement redefiningElement);

        /// <summary>
        ///     The query isRedefinitionContextValid() specifies whether the redefinition
        ///     contexts of this RedefinableElement are properly related to the redefinition
        ///     contexts of the specified RedefinableElement to allow this element to redefine
        ///     the other. By default at least one of the redefinition contexts of this element
        ///     must be a specialization of at least one of the redefinition contexts of the
        ///     specified element.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="redefinedElement"></param>
        bool isRedefinitionContextValid(RedefinableElement redefinedElement);
    }
} //end namespace Classification