///////////////////////////////////////////////////////////
//  RedefinableTemplateSignature.cs
//  Implementation of the Class RedefinableTemplateSignature
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:12
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.CommonStructure;

namespace UML.Classification
{
    /// <summary>
    ///     A RedefinableTemplateSignature supports the addition of formal template
    ///     parameters in a specialization of a template classifier.
    /// </summary>
    public interface RedefinableTemplateSignature : TemplateSignature, RedefinableElement
    {
        /// <summary>
        ///     The formal template parameters of the extended signatures.
        /// </summary>
        IEnumerable<TemplateParameter> inheritedParameter { get; set; }

        /// <summary>
        ///     The signatures extended by this RedefinableTemplateSignature.
        /// </summary>
        IEnumerable<RedefinableTemplateSignature> extendedSignature { get; set; }

        /// <summary>
        /// Derivation for RedefinableTemplateSignature::/inheritedParameter
        /// </summary>
        /// <param name="result"></param>
        //UML.CommonStructure.TemplateParameter inheritedParameter(TemplateParameter result);

        /// <summary>
        ///     The query isConsistentWith() specifies, for any two
        ///     RedefinableTemplateSignatures in a context in which redefinition is possible,
        ///     whether redefinition would be logically consistent. A redefining template
        ///     signature is always consistent with a redefined template signature, as
        ///     redefinition only adds new formal parameters.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="redefiningElement"></param>
        bool isConsistentWith(RedefinableElement redefiningElement);
    }
} //end namespace Classification