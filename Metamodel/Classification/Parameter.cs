///////////////////////////////////////////////////////////
//  Parameter.cs
//  Implementation of the Class Parameter
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:09
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.CommonStructure;
using UML.StructuredClassifiers;
using UML.Values;

namespace UML.Classification
{
    /// <summary>
    ///     A Parameter is a specification of an argument used to pass information into or
    ///     out of an invocation of a BehavioralFeature.  Parameters can be treated as
    ///     ConnectableElements within Collaborations.
    /// </summary>
    public interface Parameter : ConnectableElement, MultiplicityElement
    {
        /// <summary>
        ///     A String that represents a value to be used when no argument is supplied for
        ///     the Parameter.
        /// </summary>
        bool Default { get; set; }

        /// <summary>
        ///     Indicates whether a parameter is being sent into or out of a behavioral element.
        /// </summary>
        ParameterDirectionKind direction { get; set; }

        /// <summary>
        ///     Specifies the effect that executions of the owner of the Parameter have on
        ///     objects passed in or out of the parameter.
        /// </summary>
        ParameterEffectKind effect { get; set; }

        /// <summary>
        ///     Tells whether an output parameter may emit a value to the exclusion of the
        ///     other outputs.
        /// </summary>
        bool isException { get; set; }

        /// <summary>
        ///     Tells whether an input parameter may accept values while its behavior is
        ///     executing, or whether an output parameter may post values while the behavior is
        ///     executing.
        /// </summary>
        bool isStream { get; set; }

        /// <summary>
        ///     Specifies a ValueSpecification that represents a value to be used when no
        ///     argument is supplied for the Parameter.
        /// </summary>
        ValueSpecification defaultValue { get; set; }

        /// <summary>
        ///     The ParameterSets containing the parameter. See ParameterSet.
        /// </summary>
        IEnumerable<ParameterSet> parameterSet { get; set; }

        /// <summary>
        /// Derivation for Parameter::/default
        /// </summary>
        /// <param name="result"></param>
        //void default(result){

        //}
    }
} //end namespace Classification