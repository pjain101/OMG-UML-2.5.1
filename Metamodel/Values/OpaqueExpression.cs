///////////////////////////////////////////////////////////
//  OpaqueExpression.cs
//  Implementation of the Class OpaqueExpression
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:08
//  Original author: Андрей
///////////////////////////////////////////////////////////

using UML.Classification;
using UML.CommonBehavior;

namespace UML.Values
{
    /// <summary>
    ///     An OpaqueExpression is a ValueSpecification that specifies the computation of a
    ///     collection of values either in terms of a UML Behavior or based on a textual
    ///     statement in a language other than UML
    /// </summary>
    public interface OpaqueExpression : ValueSpecification
    {
        /// <summary>
        ///     A textual definition of the behavior of the OpaqueExpression, possibly in
        ///     multiple languages.
        /// </summary>
        string body { get; set; }

        /// <summary>
        ///     Specifies the languages used to express the textual bodies of the
        ///     OpaqueExpression.  Languages are matched to body Strings by order. The
        ///     interpretation of the body depends on the languages. If the languages are
        ///     unspecified, they may be implicit from the expression body or the context.
        /// </summary>
        string language { get; set; }

        /// <summary>
        ///     Specifies the behavior of the OpaqueExpression as a UML Behavior.
        /// </summary>
        Behavior behavior { get; set; }

        /// <summary>
        ///     If an OpaqueExpression is specified using a UML Behavior, then this refers to
        ///     the single required return Parameter of that Behavior. When the Behavior
        ///     completes execution, the values on this Parameter give the result of evaluating
        ///     the OpaqueExpression.
        /// </summary>
        Parameter result { get; set; }

        /// <summary>
        /// The query isIntegral() tells whether an expression is intended to produce an
        /// Integer.
        /// </summary>
        /// <param name="result"></param>
        //void isIntegral(result){

        //}

        /// <summary>
        /// The query isNonNegative() tells whether an integer expression has a non-
        /// negative value.
        /// </summary>
        /// <param name="result"></param>
        //void isNonNegative(result){

        //}

        /// <summary>
        /// The query isPositive() tells whether an integer expression has a positive value.
        /// 
        /// </summary>
        /// <param name="result"></param>
        //void isPositive(result){

        //}

        /// <summary>
        /// Derivation for OpaqueExpression::/result
        /// </summary>
        /// <param name="result"></param>
        //UML.Classification.Parameter result(Parameter result){

        //	return null;
        //}

        /// <summary>
        /// The query value() gives an integer value for an expression intended to produce
        /// one.
        /// </summary>
        /// <param name="result"></param>
        //void value(result){

        //}
    }
} //end namespace Values