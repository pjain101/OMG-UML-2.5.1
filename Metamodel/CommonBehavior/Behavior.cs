///////////////////////////////////////////////////////////
//  Behavior.cs
//  Implementation of the Class Behavior
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 21:59:53
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.Classification;
using UML.CommonStructure;
using UML.SimpleClassifiers;
using UML.StructuredClassifiers;

namespace UML.CommonBehavior
{
    /// <summary>
    ///     Behavior is a specification of how its context BehavioredClassifier changes
    ///     state over time. This specification may be either a definition of possible
    ///     behavior execution or emergent behavior, or a selective illustration of an
    ///     interesting subset of possible executions. The latter form is typically used
    ///     for capturing examples, such as a trace of a particular execution.
    /// </summary>
    public interface Behavior : Class
    {
        /// <summary>
        ///     Tells whether the Behavior can be invoked while it is still executing from a
        ///     previous invocation.
        /// </summary>
        bool isReentrant { get; set; }

        /// <summary>
        ///     Designates a BehavioralFeature that the Behavior implements. The
        ///     BehavioralFeature must be owned by the BehavioredClassifier that owns the
        ///     Behavior or be inherited by it. The Parameters of the BehavioralFeature and the
        ///     implementing Behavior must match. A Behavior does not need to have a
        ///     specification, in which case it either is the classifierBehavior of a
        ///     BehavioredClassifier or it can only be invoked by another Behavior of the
        ///     Classifier.
        /// </summary>
        BehavioralFeature specification { get; set; }

        /// <summary>
        ///     References a list of Parameters to the Behavior which describes the order and
        ///     type of arguments that can be given when the Behavior is invoked and of the
        ///     values which will be returned when the Behavior completes its execution.
        /// </summary>
        IEnumerable<Parameter> ownedParameter { get; set; }

        /// <summary>
        ///     References the Behavior that this Behavior redefines. A subtype of Behavior may
        ///     redefine any other subtype of Behavior. If the Behavior implements a
        ///     BehavioralFeature, it replaces the redefined Behavior. If the Behavior is a
        ///     classifierBehavior, it extends the redefined Behavior.
        /// </summary>
        IEnumerable<Behavior> redefinedBehavior { get; set; }

        /// <summary>
        ///     An optional set of Constraints specifying what is fulfilled after the execution
        ///     of the Behavior is completed, if its precondition was fulfilled before its
        ///     invocation.
        /// </summary>
        IEnumerable<Constraint> postcondition { get; set; }

        /// <summary>
        ///     An optional set of Constraints specifying what must be fulfilled before the
        ///     Behavior is invoked.
        /// </summary>
        IEnumerable<Constraint> precondition { get; set; }

        /// <summary>
        ///     The BehavioredClassifier that is the context for the execution of the Behavior.
        ///     A Behavior that is directly owned as a nestedClassifier does not have a context.
        ///     Otherwise, to determine the context of a Behavior, find the first
        ///     BehavioredClassifier reached by following the chain of owner relationships from
        ///     the Behavior, if any. If there is such a BehavioredClassifier, then it is the
        ///     context, unless it is itself a Behavior with a non-empty context, in which case
        ///     that is also the context for the original Behavior. For example, following this
        ///     algorithm, the context of an entry Behavior in a StateMachine is the
        ///     BehavioredClassifier that owns the StateMachine. The features of the context
        ///     BehavioredClassifier as well as the Elements visible to the context Classifier
        ///     are visible to the Behavior.
        /// </summary>
        BehavioredClassifier context { get; set; }

        /// <summary>
        ///     The ParameterSets owned by this Behavior.
        /// </summary>
        IEnumerable<ParameterSet> ownedParameterSet { get; set; }

        /// <summary>
        ///     The first BehavioredClassifier reached by following the chain of owner
        ///     relationships from the Behavior, if any.
        /// </summary>
        /// <param name="from"></param>
        /// <param name="result"></param>
        BehavioredClassifier behavioredClassifier(Element from, BehavioredClassifier result);

        /// <summary>
        /// A Behavior that is directly owned as a nestedClassifier does not have a context.
        /// Otherwise, to determine the context of a Behavior, find the first
        /// BehavioredClassifier reached by following the chain of owner relationships from
        /// the Behavior, if any. If there is such a BehavioredClassifier, then it is the
        /// context, unless it is itself a Behavior with a non-empty context, in which case
        /// that is also the context for the original Behavior.
        /// </summary>
        /// <param name="result"></param>
        //UML.SimpleClassifiers.BehavioredClassifier context(BehavioredClassifier result);

        /// <summary>
        ///     The in and inout ownedParameters of the Behavior.
        /// </summary>
        /// <param name="result"></param>
        Parameter inputParameters(Parameter result);

        /// <summary>
        ///     The out, inout and return ownedParameters.
        /// </summary>
        /// <param name="result"></param>
        Parameter outputParameters(Parameter result);
    }
} //end namespace CommonBehavior