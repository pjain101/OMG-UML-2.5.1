///////////////////////////////////////////////////////////
//  Message.cs
//  Implementation of the Class Message
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:06
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.CommonStructure;
using UML.StructuredClassifiers;
using UML.Values;

namespace UML.Interactions
{
    /// <summary>
    ///     A Message defines a particular communication between Lifelines of an
    ///     Interaction.
    /// </summary>
    public interface Message : NamedElement
    {
        /// <summary>
        ///     The derived kind of the Message (complete, lost, found, or unknown).
        /// </summary>
        MessageKind messageKind { get; set; }

        /// <summary>
        ///     The sort of communication reflected by the Message.
        /// </summary>
        MessageSort messageSort { get; set; }

        /// <summary>
        ///     The arguments of the Message.
        /// </summary>
        IEnumerable<ValueSpecification> argument { get; set; }

        /// <summary>
        ///     References the Sending of the Message.
        /// </summary>
        MessageEnd sendEvent { get; set; }

        /// <summary>
        ///     References the Receiving of the Message.
        /// </summary>
        MessageEnd receiveEvent { get; set; }

        /// <summary>
        ///     The Connector on which this Message is sent.
        /// </summary>
        Connector connector { get; set; }

        /// <summary>
        ///     The signature of the Message is the specification of its content. It refers
        ///     either an Operation or a Signal.
        /// </summary>
        NamedElement signature { get; set; }

        /// <summary>
        /// The query isDistinguishableFrom() specifies that any two Messages may coexist
        /// in the same Namespace, regardless of their names.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="n"></param>
        /// <param name="ns"></param>
        //void isDistinguishableFrom(result, NamedElement n, Namespace ns){

        //}

        /// <summary>
        /// This query returns the MessageKind value for this Message.
        /// </summary>
        /// <param name="result"></param>
        //MessageKind messageKind(MessageKind result){

        //	return null;
        //}
    }
} //end namespace Interactions