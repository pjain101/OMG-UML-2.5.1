///////////////////////////////////////////////////////////
//  Component.cs
//  Implementation of the Class Component
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 21:59:56
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.CommonStructure;
using UML.SimpleClassifiers;

namespace UML.StructuredClassifiers
{
    /// <summary>
    ///     A Component represents a modular part of a system that encapsulates its
    ///     contents and whose manifestation is replaceable within its environment.
    /// </summary>
    public interface Component : Class
    {
        /// <summary>
        ///     If true, the Component is defined at design-time, but at run-time (or execution-
        ///     time) an object specified by the Component does not exist, that is, the
        ///     Component is instantiated indirectly, through the instantiation of its
        ///     realizing Classifiers or parts.
        /// </summary>
        bool isIndirectlyInstantiated { get; set; }

        /// <summary>
        ///     The Interfaces that the Component exposes to its environment. These Interfaces
        ///     may be Realized by the Component or any of its realizingClassifiers, or they
        ///     may be the Interfaces that are provided by its Ports.
        /// </summary>
        IEnumerable<Interface> provided { get; set; }

        /// <summary>
        ///     The set of Realizations owned by the Component. Realizations reference the
        ///     Classifiers of which the Component is an abstraction; i.e., that realize its
        ///     behavior.
        /// </summary>
        IEnumerable<ComponentRealization> realization { get; set; }

        /// <summary>
        ///     The set of PackageableElements that a Component owns. In the namespace of a
        ///     Component, all model elements that are involved in or related to its definition
        ///     may be owned or imported explicitly. These may include e.g., Classes,
        ///     Interfaces, Components, Packages, UseCases, Dependencies (e.g., mappings), and
        ///     Artifacts.
        /// </summary>
        IEnumerable<PackageableElement> packagedElement { get; set; }

        /// <summary>
        ///     The Interfaces that the Component requires from other Components in its
        ///     environment in order to be able to offer its full set of provided functionality.
        ///     These Interfaces may be used by the Component or any of its
        ///     realizingClassifiers, or they may be the Interfaces that are required by its
        ///     Ports.
        /// </summary>
        IEnumerable<Interface> required { get; set; }

        /// <summary>
        /// Derivation for Component::/provided
        /// </summary>
        /// <param name="result"></param>
        //UML.SimpleClassifiers.public interface provided(public interface result){

        //	return null;
        //}

        /// <summary>
        /// Derivation for Component::/required
        /// </summary>
        /// <param name="result"></param>
        //UML.SimpleClassifiers.public interface required(public interface result){

        //	return null;
        //}
    }
} //end namespace StructuredClassifiers