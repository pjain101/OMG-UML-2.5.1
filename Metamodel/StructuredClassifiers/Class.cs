///////////////////////////////////////////////////////////
//  Class.cs
//  Implementation of the Class Class
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 21:59:54
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.Classification;
using UML.Packages;
using UML.SimpleClassifiers;

namespace UML.StructuredClassifiers
{
    /// <summary>
    ///     A Class classifies a set of objects and specifies the features that
    ///     characterize the structure and behavior of those objects.  A Class may have an
    ///     internal structure and Ports.
    /// </summary>
    public interface Class : EncapsulatedClassifier, BehavioredClassifier
    {
        /// <summary>
        ///     If true, the Class does not provide a complete declaration and cannot be
        ///     instantiated. An Class is typically used as a target of Associations
        ///     or Generalizations.
        /// </summary>
        bool Is { get; set; }

        /// <summary>
        ///     Determines whether an object specified by this Class is active or not. If true,
        ///     then the owning Class is referred to as an active Class. If false, then such a
        ///     Class is referred to as a passive Class.
        /// </summary>
        bool isActive { get; set; }

        /// <summary>
        ///     The Receptions owned by the Class.
        /// </summary>
        IEnumerable<Reception> ownedReception { get; set; }

        /// <summary>
        ///     The Classifiers owned by the Class that are not ownedBehaviors.
        /// </summary>
        IEnumerable<Classifier> nestedClassifier { get; set; }

        /// <summary>
        ///     The attributes (i.e., the Properties) owned by the Class.
        /// </summary>
        IEnumerable<Property> ownedAttribute { get; set; }

        /// <summary>
        ///     This property is used when the Class is acting as a metaclass. It references
        ///     the Extensions that specify additional properties of the metaclass. The
        ///     property is derived from the Extensions whose memberEnds are typed by the Class.
        /// </summary>
        IEnumerable<Extension> extension { get; set; }

        /// <summary>
        ///     The superclasses of a Class, derived from its Generalizations.
        /// </summary>
        IEnumerable<Class> superClass { get; set; }

        /// <summary>
        ///     The Operations owned by the Class.
        /// </summary>
        IEnumerable<Operation> ownedOperation { get; set; }

        /// <summary>
        /// Derivation for Class::/extension : Extension
        /// </summary>
        /// <param name="result"></param>
        //UML.Packages.Extension extension(Extension result){

        //	return null;
        //}

        /// <summary>
        /// Derivation for Class::/superClass : Class
        /// </summary>
        /// <param name="result"></param>
        //Class superClass(Class result){

        //	return null;
        //}
    }
} //end namespace StructuredClassifiers