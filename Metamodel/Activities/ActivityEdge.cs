///////////////////////////////////////////////////////////
//  ActivityEdge.cs
//  Implementation of the Class ActivityEdge
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 21:59:52
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.Classification;
using UML.Values;

namespace UML.Activities
{
    /// <summary>
    ///     An ActivityEdge is an class for directed connections between two
    ///     ActivityNodes.
    /// </summary>
    public interface ActivityEdge : RedefinableElement
    {
        /// <summary>
        ///     A ValueSpecification that is evaluated to determine if a token can traverse the
        ///     ActivityEdge. If an ActivityEdge has no guard, then there is no restriction on
        ///     tokens traversing the edge.
        /// </summary>
        ValueSpecification guard { get; set; }

        /// <summary>
        ///     The minimum number of tokens that must traverse the ActivityEdge at the same
        ///     time. If no weight is specified, this is equivalent to specifying a constant
        ///     value of 1.
        /// </summary>
        ValueSpecification weight { get; set; }

        /// <summary>
        ///     ActivityEdges from a generalization of the Activity containing this
        ///     ActivityEdge that are redefined by this ActivityEdge.
        /// </summary>
        IEnumerable<ActivityEdge> redefinedEdge { get; set; }

        /// <summary>
        ///     ActivityGroups containing the ActivityEdge.
        /// </summary>
        IEnumerable<ActivityGroup> inGroup { get; set; }

        /// <summary>
        ///     The ActivityNode from which tokens are taken when they traverse the
        ///     ActivityEdge.
        /// </summary>
        ActivityNode source { get; set; }

        /// <summary>
        ///     The ActivityNode to which tokens are put when they traverse the ActivityEdge.
        /// </summary>
        ActivityNode target { get; set; }

        /// <summary>
        ///     ActivityPartitions containing the ActivityEdge.
        /// </summary>
        IEnumerable<ActivityPartition> inPartition { get; set; }

        /// <summary>
        ///     The InterruptibleActivityRegion for which this ActivityEdge is an
        ///     interruptingEdge.
        /// </summary>
        InterruptibleActivityRegion interrupts { get; set; }

        /// <param name="result"></param>
        /// <param name="redefiningElement"></param>
        void isConsistentWith(object result, RedefinableElement redefiningElement);
    }
} //end namespace Activities