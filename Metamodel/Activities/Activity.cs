///////////////////////////////////////////////////////////
//  Activity.cs
//  Implementation of the Class Activity
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 21:59:52
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.Actions;
using UML.CommonBehavior;

namespace UML.Activities
{
    /// <summary>
    ///     An Activity is the specification of parameterized Behavior as the coordinated
    ///     sequencing of subordinate units.
    /// </summary>
    public interface Activity : Behavior
    {
        /// <summary>
        ///     If true, this Activity must not make any changes to objects. The default is
        ///     false (an Activity may make nonlocal changes). (This is an assertion, not an
        ///     executable property. It may be used by an execution engine to optimize model
        ///     execution. If the assertion is violated by the Activity, then the model is ill-
        ///     formed.)
        /// </summary>
        bool isReadOnly { get; set; }

        /// <summary>
        ///     If true, all invocations of the Activity are handled by the same execution.
        /// </summary>
        bool isSingleExecution { get; set; }

        /// <summary>
        ///     Top-level ActivityPartitions in the Activity.
        /// </summary>
        IEnumerable<ActivityPartition> partition { get; set; }

        /// <summary>
        ///     ActivityEdges expressing flow between the nodes of the Activity.
        /// </summary>
        IEnumerable<ActivityEdge> edge { get; set; }

        /// <summary>
        ///     Top-level Variables defined by the Activity.
        /// </summary>
        IEnumerable<Variable> variable { get; set; }

        /// <summary>
        ///     ActivityNodes coordinated by the Activity.
        /// </summary>
        IEnumerable<ActivityNode> node { get; set; }

        /// <summary>
        ///     Top-level ActivityGroups in the Activity.
        /// </summary>
        IEnumerable<ActivityGroup> group { get; set; }

        /// <summary>
        ///     Top-level StructuredActivityNodes in the Activity.
        /// </summary>
        IEnumerable<StructuredActivityNode> structuredNode { get; set; }
    }
} //end namespace Activities