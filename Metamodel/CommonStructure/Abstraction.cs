///////////////////////////////////////////////////////////
//  Abstraction.cs
//  Implementation of the Class Abstraction
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 21:59:51
//  Original author: Андрей
///////////////////////////////////////////////////////////

using UML.Values;

namespace UML.CommonStructure
{
    /// <summary>
    ///     An Abstraction is a Relationship that relates two Elements or sets of Elements
    ///     that represent the same concept at different levels of abstraction or from
    ///     different viewpoints.
    /// </summary>
    public interface Abstraction : Dependency
    {
        /// <summary>
        ///     An OpaqueExpression that states the abstraction relationship between the
        ///     supplier(s) and the client(s). In some cases, such as derivation, it is usually
        ///     formal and unidirectional; in other cases, such as trace, it is usually
        ///     informal and bidirectional. The mapping expression is optional and may be
        ///     omitted if the precise relationship between the Elements is not specified.
        /// </summary>
        OpaqueExpression mapping { get; set; }
    }
} //end namespace CommonStructure