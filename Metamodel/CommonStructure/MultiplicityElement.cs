///////////////////////////////////////////////////////////
//  MultiplicityElement.cs
//  Implementation of the Class MultiplicityElement
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:07
//  Original author: Андрей
///////////////////////////////////////////////////////////

using UML.Values;

namespace UML.CommonStructure
{
    /// <summary>
    ///     A multiplicity is a definition of an inclusive interval of non-negative
    ///     integers beginning with a lower bound and ending with a (possibly infinite)
    ///     upper bound. A MultiplicityElement embeds this information to specify the
    ///     allowable cardinalities for an instantiation of the Element.
    /// </summary>
    public interface MultiplicityElement : Element
    {
        /// <summary>
        ///     For a multivalued multiplicity, this attribute specifies whether the values in
        ///     an instantiation of this MultiplicityElement are sequentially ordered.
        /// </summary>
        bool isOrdered { get; set; }

        /// <summary>
        ///     For a multivalued multiplicity, this attributes specifies whether the values in
        ///     an instantiation of this MultiplicityElement are unique.
        /// </summary>
        bool isUnique { get; set; }

        /// <summary>
        ///     The lower bound of the multiplicity interval.
        /// </summary>
        string lower { get; set; }

        /// <summary>
        ///     The upper bound of the multiplicity interval.
        /// </summary>
        string upper { get; set; }

        /// <summary>
        ///     The specification of the upper bound for this multiplicity.
        /// </summary>
        ValueSpecification upperValue { get; set; }

        /// <summary>
        ///     The specification of the lower bound for this multiplicity.
        /// </summary>
        ValueSpecification lowerValue { get; set; }

        /// <summary>
        ///     The operation compatibleWith takes another multiplicity as input. It returns
        ///     true if the other multiplicity is wider than, or the same as, self.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="other"></param>
        bool compatibleWith(MultiplicityElement other);

        /// <summary>
        ///     The query includesMultiplicity() checks whether this multiplicity includes all
        ///     the cardinalities allowed by the specified multiplicity.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="M"></param>
        bool includesMultiplicity(MultiplicityElement M);

        /// <summary>
        /// The operation is determines if the upper and lower bound of the ranges are the
        /// ones given.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="lowerbound"></param>
        /// <param name="upperbound"></param>
        //bool Is(lowerbound, upperbound){

        //}

        /// <summary>
        ///     The query isMultivalued() checks whether this multiplicity has an upper bound
        ///     greater than one.
        /// </summary>
        /// <param name="result"></param>
        bool isMultivalued();

        /// <summary>
        /// The derived lower attribute must equal the lowerBound.
        /// </summary>
        /// <param name="result"></param>
        //void lower(result){

        //}

        /// <summary>
        /// The query lowerBound() returns the lower bound of the multiplicity as an
        /// integer, which is the integerValue of lowerValue, if this is given, and 1
        /// otherwise.
        /// </summary>
        /// <param name="result"></param>
        //void lowerBound(result){

        //}

        /// <summary>
        /// The derived upper attribute must equal the upperBound.
        /// </summary>
        /// <param name="result"></param>
        //void upper(result){

        //}

        /// <summary>
        /// The query upperBound() returns the upper bound of the multiplicity for a
        /// bounded multiplicity as an unlimited natural, which is the
        /// unlimitedNaturalValue of upperValue, if given, and 1, otherwise.
        /// </summary>
        /// <param name="result"></param>
        //void upperBound(result){

        //}
    }
} //end namespace CommonStructure