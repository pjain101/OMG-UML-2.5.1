///////////////////////////////////////////////////////////
//  Namespace.cs
//  Implementation of the Class Namespace
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:07
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;

namespace UML.CommonStructure
{
    /// <summary>
    ///     A Namespace is an Element in a model that owns and/or imports a set of
    ///     NamedElements that can be identified by name.
    /// </summary>
    public interface Namespace : NamedElement
    {
        /// <summary>
        ///     References the PackageableElements that are members of this Namespace as a
        ///     result of either PackageImports or ElementImports.
        /// </summary>
        IEnumerable<PackageableElement> importedMember { get; set; }

        /// <summary>
        ///     A collection of NamedElements identifiable within the Namespace, either by
        ///     being owned or by being introduced by importing or inheritance.
        /// </summary>
        IEnumerable<NamedElement> member { get; set; }

        /// <summary>
        ///     References the PackageImports owned by the Namespace.
        /// </summary>
        IEnumerable<PackageImport> packageImport { get; set; }

        /// <summary>
        ///     Specifies a set of Constraints owned by this Namespace.
        /// </summary>
        IEnumerable<Constraint> ownedRule { get; set; }

        /// <summary>
        ///     A collection of NamedElements owned by the Namespace.
        /// </summary>
        IEnumerable<NamedElement> ownedMember { get; set; }

        /// <summary>
        ///     References the ElementImports owned by the Namespace.
        /// </summary>
        IEnumerable<ElementImport> elementImport { get; set; }

        /// <summary>
        ///     The query excludeCollisions() excludes from a set of PackageableElements any
        ///     that would not be distinguishable from each other in this Namespace.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="imps"></param>
        PackageableElement excludeCollisions(PackageableElement result, PackageableElement imps);

        /// <summary>
        ///     The query getNamesOfMember() gives a set of all of the names that a member
        ///     would have in a Namespace, taking importing into account. In general a member
        ///     can have multiple names in a Namespace if it is imported more than once with
        ///     different aliases.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="element"></param>
        string getNamesOfMember(NamedElement element);

        /// <summary>
        /// The importedMember property is derived as the PackageableElements that are
        /// members of this Namespace as a result of either PackageImports or
        /// ElementImports.
        /// </summary>
        /// <param name="result"></param>
        //PackageableElement importedMember(PackageableElement result);

        /// <summary>
        /// The query importMembers() defines which of a set of PackageableElements are
        /// actually imported into the Namespace. This excludes hidden ones, i.e., those
        /// which have names that conflict with names of ownedMembers, and it also excludes
        /// PackageableElements that would have the indistinguishable names when imported.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="imps"></param>
        //PackageableElement importMembers(PackageableElement result, PackageableElement imps){

        //	return null;
        //}

        /// <summary>
        /// The Boolean query membersAreDistinguishable() determines whether all of the
        /// Namespace's members are distinguishable within it.
        /// </summary>
        /// <param name="result"></param>
        //void membersAreDistinguishable(result){

        //}
    }
} //end namespace CommonStructure