///////////////////////////////////////////////////////////
//  NamedElement.cs
//  Implementation of the Class NamedElement
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:07
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.Packages;
using UML.Values;

namespace UML.CommonStructure
{
    /// <summary>
    ///     A NamedElement is an Element in a model that may have a name. The name may be
    ///     given directly and/or via the use of a StringExpression.
    /// </summary>
    public interface NamedElement : Element
    {
        /// <summary>
        ///     The name of the NamedElement.
        /// </summary>
        string name { get; set; }

        /// <summary>
        ///     A name that allows the NamedElement to be identified within a hierarchy of
        ///     nested Namespaces. It is constructed from the names of the containing
        ///     Namespaces starting at the root of the hierarchy and ending with the name of
        ///     the NamedElement itself.
        /// </summary>
        string qualifiedName { get; set; }

        /// <summary>
        ///     Determines whether and how the NamedElement is visible outside its owning
        ///     Namespace.
        /// </summary>
        VisibilityKind visibility { get; set; }

        /// <summary>
        ///     Indicates the Dependencies that reference this NamedElement as a client.
        /// </summary>
        IEnumerable<Dependency> clientDependency { get; set; }

        /// <summary>
        ///     The StringExpression used to define the name of this NamedElement.
        /// </summary>
        StringExpression nameExpression { get; set; }

        /// <summary>
        ///     The query allNamespaces() gives the sequence of Namespaces in which the
        ///     NamedElement is nested, working outwards.
        /// </summary>
        /// <param name="result"></param>
        IEnumerable<Namespace> allNamespaces(Namespace result);

        /// <summary>
        ///     The query allOwningPackages() returns the set of all the enclosing Namespaces
        ///     of this NamedElement, working outwards, that are Packages, up to but not
        ///     including the first such Namespace that is not a Package.
        /// </summary>
        /// <param name="result"></param>
        IEnumerable<Package> allOwningPackages(Package result);

        /// 
        /// <param name="result"></param>
        //Dependency clientDependency(Dependency result);

        /// <summary>
        ///     The query isDistinguishableFrom() determines whether two NamedElements may
        ///     logically co-exist within a Namespace. By default, two named elements are
        ///     distinguishable if (a) they have types neither of which is a kind of the other
        ///     or (b) they have different names.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="n"></param>
        /// <param name="ns"></param>
        bool isDistinguishableFrom(NamedElement n, Namespace ns);

        /// <summary>
        /// When a NamedElement has a name, and all of its containing Namespaces have a
        /// name, the qualifiedName is constructed from the name of the NamedElement and
        /// the names of the containing Namespaces.
        /// </summary>
        /// <param name="result"></param>
        //void qualifiedName(result){

        //}

        /// <summary>
        /// The query separator() gives the string that is used to separate names when
        /// constructing a qualifiedName.
        /// </summary>
        /// <param name="result"></param>
        //void separator(result){

        //}
    }
} //end namespace CommonStructure