///////////////////////////////////////////////////////////
//  Pseudostate.cs
//  Implementation of the Class Pseudostate
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:10
//  Original author: Андрей
///////////////////////////////////////////////////////////

namespace UML.StateMachines
{
    /// <summary>
    ///     A Pseudostate is an abstraction that encompasses different types of transient
    ///     Vertices in the StateMachine graph. A StateMachine instance never comes to rest
    ///     in a Pseudostate, instead, it will exit and enter the Pseudostate within a
    ///     single run-to-completion step.
    /// </summary>
    public interface Pseudostate : Vertex
    {
        /// <summary>
        ///     Determines the precise type of the Pseudostate and can be one of: entryPoint,
        ///     exitPoint, initial, deepHistory, shallowHistory, join, fork, junction,
        ///     terminate or choice.
        /// </summary>
        PseudostateKind kind { get; set; }


        /// <summary>
        /// The query isConsistentWith() specifies a Pseudostate can only be redefined by a
        /// Pseudostate of the same kind.
        /// </summary>
        /// <param name="redefiningElement"></param>
        /// <param name="result"></param>
        //void isConsistentWith(RedefinableElement redefiningElement, result){

        //}
    }
} //end namespace StateMachines