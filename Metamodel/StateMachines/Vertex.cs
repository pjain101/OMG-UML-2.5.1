///////////////////////////////////////////////////////////
//  Vertex.cs
//  Implementation of the Class Vertex
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:18
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.Classification;
using UML.CommonStructure;

namespace UML.StateMachines
{
    /// <summary>
    ///     A Vertex is an abstraction of a node in a StateMachine graph. It can be the
    ///     source or destination of any number of Transitions.
    /// </summary>
    public interface Vertex : RedefinableElement, NamedElement
    {
        /// <summary>
        ///     The Vertex of which this Vertex is a redefinition.
        /// </summary>
        Vertex redefinedVertex { get; set; }

        /// <summary>
        ///     References the Classifier in which context this element may be redefined.
        /// </summary>
        Classifier redefinitionContext { get; set; }

        /// <summary>
        ///     Specifies the Transitions departing from this Vertex.
        /// </summary>
        IEnumerable<Transition> outgoing { get; set; }

        /// <summary>
        ///     Specifies the Transitions entering this Vertex.
        /// </summary>
        IEnumerable<Transition> incoming { get; set; }

        /// <summary>
        /// The operation containingStateMachine() returns the StateMachine in which this
        /// Vertex is defined.
        /// </summary>
        /// <param name="result"></param>
        //StateMachine containingStateMachine(StateMachine result){

        //	return null;
        //}

        /// <summary>
        /// Derivation for Vertex::/incoming.
        /// </summary>
        /// <param name="result"></param>
        //Transition incoming(Transition result){

        //	return null;
        //}

        /// <summary>
        /// The query isConsistentWith specifies that a non-final State can only be
        /// redefined by a non-final State (this is overridden by FinalState to allow a
        /// FinalState to be redefined by a FinalState) and, if the redefined State is a
        /// submachine State, then the redefining State must be a submachine state whose
        /// submachine is a redefinition of the submachine of the redefined State. Note
        /// that consistency requirements for the redefinition of Regions and
        /// connectionPoint Pseudostates within a composite State and connection
        /// ConnectionPoints of a submachine State are specified by the isConsistentWith
        /// and isRedefinitionContextValid operations for Region and Vertex (and its
        /// subclasses, Pseudostate and ConnectionPointReference).
        /// The query isRedefinitionContextValid specifies that the redefinition context of
        /// a redefining Vertex is properly related to the redefinition context of the
        /// redefined Vertex if the owner of the redefining Vertex is a redefinition of the
        /// owner of the redefined Vertex. Note that the owner of a Vertex may be a Region,
        /// a StateMachine (for a connectionPoint Pseudostate), or a State (for a
        /// connectionPoint Pseudostate or a connection ConnectionPointReference), all of
        /// which are RedefinableElements.
        /// </summary>
        //void isConsistentWith(){

        //}

        /// <summary>
        /// This utility query returns true if the Vertex is contained in the Region r
        /// (input argument).
        /// </summary>
        /// <param name="result"></param>
        /// <param name="r"></param>
        //void isContainedInRegion(result, Region r){

        //}

        /// <summary>
        /// This utility operation returns true if the Vertex is contained in the State s
        /// (input argument).
        /// </summary>
        /// <param name="result"></param>
        /// <param name="s"></param>
        //void isContainedInState(result, State s){

        //}

        /// <summary>
        /// Derivation for Vertex::/outgoing
        /// </summary>
        /// <param name="result"></param>
        //Transition outgoing(Transition result){

        //	return null;
        //}

        /// <summary>
        /// The redefinition context of a Vertex is the nearest containing StateMachine.
        /// </summary>
        /// <param name="result"></param>
        //UML.Classification.Classifier redefinitionContext(Classifier result){

        //	return null;
        //}
    }
} //end namespace StateMachines