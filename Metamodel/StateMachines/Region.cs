///////////////////////////////////////////////////////////
//  Region.cs
//  Implementation of the Class Region
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:12
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.Classification;
using UML.CommonStructure;

namespace UML.StateMachines
{
    /// <summary>
    ///     A Region is a top-level part of a StateMachine or a composite State, that
    ///     serves as a container for the Vertices and Transitions of the StateMachine. A
    ///     StateMachine or composite State may contain multiple Regions representing
    ///     behaviors that may occur in parallel.
    /// </summary>
    public interface Region : RedefinableElement, Namespace
    {
        /// <summary>
        ///     The set of Transitions owned by the Region.
        /// </summary>
        IEnumerable<Transition> transition { get; set; }

        /// <summary>
        ///     References the Classifier in which context this element may be redefined.
        /// </summary>
        Classifier redefinitionContext { get; set; }

        /// <summary>
        ///     The set of Vertices that are owned by this Region.
        /// </summary>
        IEnumerable<Vertex> subvertex { get; set; }

        /// <summary>
        ///     The region of which this region is an extension.
        /// </summary>
        Region extendedRegion { get; set; }

        /// <summary>
        /// The operation belongsToPSM () checks if the Region belongs to a
        /// ProtocolStateMachine.
        /// </summary>
        /// <param name="result"></param>
        //void belongsToPSM(result){

        //}

        /// <summary>
        /// The operation containingStateMachine() returns the StateMachine in which this
        /// Region is defined.
        /// </summary>
        /// <param name="result"></param>
        //StateMachine containingStateMachine(StateMachine result){

        //	return null;
        //}

        /// <summary>
        /// The query isConsistentWith specifies that a Region can be redefined by any
        /// Region for which the redefinition context is valid (see the
        /// isRedefinitionContextValid operation). Note that consistency requirements for
        /// the redefinition of Vertices and Transitions within a redefining Region are
        /// specified by the isConsistentWith and isRedefinitionContextValid operations for
        /// Vertex (and its subclasses) and Transition.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="redefiningElement"></param>
        //void isConsistentWith(result, RedefinableElement redefiningElement){

        //}

        /// <summary>
        /// The query isRedefinitionContextValid() specifies whether the redefinition
        /// contexts of a Region are properly related to the redefinition contexts of the
        /// specified Region to allow this element to redefine the other. The containing
        /// StateMachine or State of a redefining Region must Redefine the containing
        /// StateMachine or State of the redefined Region.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="redefinedElement"></param>
        //void isRedefinitionContextValid(result, RedefinableElement redefinedElement){

        //}

        /// <summary>
        /// The redefinition context of a Region is the nearest containing StateMachine.
        /// </summary>
        /// <param name="result"></param>
        //UML.Classification.Classifier redefinitionContext(Classifier result){

        //	return null;
        //}
    }
} //end namespace StateMachines