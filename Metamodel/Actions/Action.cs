///////////////////////////////////////////////////////////
//  Action.cs
//  Implementation of the Class Action
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 21:59:51
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.Activities;
using UML.Classification;
using UML.CommonBehavior;
using UML.CommonStructure;

namespace UML.Actions
{
    /// <summary>
    ///     An Action is the fundamental unit of executable functionality. The execution of
    ///     an Action represents some transformation or processing in the modeled system.
    ///     Actions provide the ExecutableNodes within Activities and may also be used
    ///     within Interactions.
    /// </summary>
    public interface Action : ExecutableNode
    {
        /// <summary>
        ///     If true, the Action can begin a new, concurrent execution, even if there is
        ///     already another execution of the Action ongoing. If false, the Action cannot
        ///     begin a new execution until any previous execution has completed.
        /// </summary>
        bool isLocallyReentrant { get; set; }

        /// <summary>
        ///     A Constraint that must be satisfied when execution of the Action is completed.
        /// </summary>
        IEnumerable<Constraint> localPostcondition { get; set; }

        /// <summary>
        ///     A Constraint that must be satisfied when execution of the Action is started.
        /// </summary>
        IEnumerable<Constraint> localPrecondition { get; set; }

        /// <summary>
        ///     The ordered set of InputPins representing the inputs to the Action.
        /// </summary>
        IEnumerable<InputPin> input { get; set; }

        /// <summary>
        ///     The context Classifier of the Behavior that contains this Action, or the
        ///     Behavior itself if it has no context.
        /// </summary>
        Classifier context { get; set; }

        /// <summary>
        ///     The ordered set of OutputPins representing outputs from the Action.
        /// </summary>
        IEnumerable<OutputPin> output { get; set; }

        /// <summary>
        ///     Return this Action and all Actions contained directly or indirectly in it. By
        ///     default only the Action itself is returned, but the operation is overridden for
        ///     StructuredActivityNodes.
        /// </summary>
        /// <param name="result"></param>
        Action allActions(Action result);

        /// <summary>
        ///     Returns all the ActivityNodes directly or indirectly owned by this Action. This
        ///     includes at least all the Pins of the Action.
        /// </summary>
        /// <param name="result"></param>
        ActivityNode allOwnedNodes(ActivityNode result);

        /// <param name="result"></param>
        Behavior containingBehavior(Behavior result);

        /// <summary>
        /// The derivation for the context property.
        /// </summary>
        /// <param name="result"></param>
        //UML.Classification.Classifier context(Classifier result);
    }
} //end namespace Actions