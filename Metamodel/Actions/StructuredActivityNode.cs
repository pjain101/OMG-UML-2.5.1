///////////////////////////////////////////////////////////
//  StructuredActivityNode.cs
//  Implementation of the Class StructuredActivityNode
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 22:00:15
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using UML.Activities;
using UML.CommonStructure;

namespace UML.Actions
{
    /// <summary>
    ///     A StructuredActivityNode is an Action that is also an ActivityGroup and whose
    ///     behavior is specified by the ActivityNodes and ActivityEdges it so contains.
    ///     Unlike other kinds of ActivityGroup, a StructuredActivityNode owns the
    ///     ActivityNodes and ActivityEdges it contains, and so a node or edge can only be
    ///     directly contained in one StructuredActivityNode, though
    ///     StructuredActivityNodes may be nested.
    /// </summary>
    public interface StructuredActivityNode : Action, ActivityGroup, Namespace
    {
        /// <summary>
        ///     If true, then any object used by an Action within the StructuredActivityNode
        ///     cannot be accessed by any Action outside the node until the
        ///     StructuredActivityNode as a whole completes. Any concurrent Actions that would
        ///     result in accessing such objects are required to have their execution deferred
        ///     until the completion of the StructuredActivityNode.
        /// </summary>
        bool mustIsolate { get; set; }

        /// <summary>
        ///     The Variables defined in the scope of the StructuredActivityNode.
        /// </summary>
        IEnumerable<Variable> variable { get; set; }

        /// <summary>
        ///     The ActivityNodes immediately contained in the StructuredActivityNode.
        /// </summary>
        IEnumerable<ActivityNode> node { get; set; }

        /// <summary>
        ///     The ActivityEdges immediately contained in the StructuredActivityNode.
        /// </summary>
        IEnumerable<ActivityEdge> edge { get; set; }

        /// <summary>
        ///     The InputPins owned by the StructuredActivityNode.
        /// </summary>
        IEnumerable<InputPin> structuredNodeInput { get; set; }

        /// <summary>
        ///     The OutputPins owned by the StructuredActivityNode.
        /// </summary>
        IEnumerable<OutputPin> structuredNodeOutput { get; set; }

        /// <summary>
        ///     Returns this StructuredActivityNode and all Actions contained in it.
        /// </summary>
        /// <param name="result"></param>
        Action allActions(Action result);

        /// <summary>
        ///     Returns all the ActivityNodes contained directly or indirectly within this
        ///     StructuredActivityNode, in addition to the Pins of the StructuredActivityNode.
        /// </summary>
        /// <param name="result"></param>
        ActivityNode allOwnedNodes(ActivityNode result);

        /// <summary>
        ///     The Activity that directly or indirectly contains this StructuredActivityNode
        ///     (considered as an Action).
        /// </summary>
        /// <param name="result"></param>
        Activity containingActivity(Activity result);

        /// <summary>
        ///     Return those ActivityNodes contained immediately within the
        ///     StructuredActivityNode that may act as sources of edges owned by the
        ///     StructuredActivityNode.
        /// </summary>
        /// <param name="result"></param>
        ActivityNode sourceNodes(ActivityNode result);

        /// <summary>
        ///     Return those ActivityNodes contained immediately within the
        ///     StructuredActivityNode that may act as targets of edges owned by the
        ///     StructuredActivityNode.
        /// </summary>
        /// <param name="result"></param>
        ActivityNode targetNodes(ActivityNode result);
    }
} //end namespace Actions