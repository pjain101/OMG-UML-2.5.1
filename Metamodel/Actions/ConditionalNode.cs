///////////////////////////////////////////////////////////
//  ConditionalNode.cs
//  Implementation of the Class ConditionalNode
//  Generated by Enterprise Architect
//  Created on:      31-янв-2019 21:59:56
//  Original author: Андрей
///////////////////////////////////////////////////////////

using System.Collections.Generic;

namespace UML.Actions
{
    /// <summary>
    ///     A ConditionalNode is a StructuredActivityNode that chooses one among some
    ///     number of alternative collections of ExecutableNodes to execute.
    /// </summary>
    public interface ConditionalNode : StructuredActivityNode
    {
        /// <summary>
        ///     If true, the modeler asserts that the test for at least one Clause of the
        ///     ConditionalNode will succeed.
        /// </summary>
        bool isAssured { get; set; }

        /// <summary>
        ///     If true, the modeler asserts that the test for at most one Clause of the
        ///     ConditionalNode will succeed.
        /// </summary>
        bool isDeterminate { get; set; }

        /// <summary>
        ///     The OutputPins that onto which are moved values from the bodyOutputs of the
        ///     Clause selected for execution.
        /// </summary>
        IEnumerable<OutputPin> result { get; set; }

        /// <summary>
        ///     The set of Clauses composing the ConditionalNode.
        /// </summary>
        Clause clause { get; set; }

        /// <summary>
        ///     Return only this ConditionalNode. This prevents Actions within the
        ///     ConditionalNode from having their OutputPins used as bodyOutputs or decider
        ///     Pins in containing LoopNodes or ConditionalNodes.
        /// </summary>
        /// <param name="result"></param>
        Action allActions(Action result);
    }
} //end namespace Actions